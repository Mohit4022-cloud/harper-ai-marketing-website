name: Deploy Harper AI Website

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  # Build and test job
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run type checking
        run: npm run type-check
        
      - name: Check code formatting
        run: npm run lint
        
      - name: Build website
        run: npm run build:prod
        env:
          SITE_URL: ${{ secrets.SITE_URL || 'https://harper-ai.com' }}
          
      - name: Run health checks
        run: npm run healthcheck
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7
          
      - name: Upload build logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            npm-debug.log
            .npm/_logs/
          retention-days: 3

  # Docker build job
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: github.event_name == 'push'
        
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name == 'push' }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/harper-ai-website:latest
            ${{ secrets.DOCKER_USERNAME }}/harper-ai-website:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'pull_request'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Deploy to staging
        id: deploy
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          echo "url=https://staging.harper-ai.com" >> $GITHUB_OUTPUT

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-test, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://harper-ai.com
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": "true"}' \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys"
            
      - name: Wait for deployment
        run: sleep 60
        
      - name: Verify deployment
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://harper-ai.com)
          if [ $response -eq 200 ]; then
            echo "Deployment successful!"
          else
            echo "Deployment verification failed with status: $response"
            exit 1
          fi

  # Lighthouse CI
  lighthouse:
    name: Lighthouse Performance Test
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            https://harper-ai.com
            https://harper-ai.com/product
            https://harper-ai.com/pricing
          uploadArtifacts: true
          temporaryPublicStorage: true
          
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const results = require('./lighthouse-results.json');
            const comment = `### Lighthouse Results
            
            | Page | Performance | Accessibility | Best Practices | SEO |
            |------|------------|---------------|----------------|-----|
            ${results.map(r => `| ${r.url} | ${r.performance} | ${r.accessibility} | ${r.bestPractices} | ${r.seo} |`).join('\n')}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run npm audit
        run: npm audit --production
        continue-on-error: true
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [build-test, deploy-production]
    if: failure()
    
    steps:
      - name: Send notification
        run: |
          echo "Deployment failed! Sending notification..."
          # Add your notification logic here (Slack, email, etc.)